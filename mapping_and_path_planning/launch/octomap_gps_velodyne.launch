<launch>

	<!-- <param name="/use_sim_time" value="true"/> -->

  <!-- Pixhawk -->
  <!-- Starts the Mavros node for IMU/GPS data -->
  <!-- Uncomment the line below for use with live data -->
  <include file="$(find mavros)/launch/apm.launch" />

	<!-- <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform_node" clear_params="true">
		<rosparam command="load" file="$(find robot_localization)/params/navsat_transform_template.yaml" /> -->

			<!-- Placeholders for input remapping. Set your topic names as the "to" values.
			<remap from="imu/data" to=""/>
			<remap from="odometry/filtered" to=""/>
			<remap from="gps/fix" to=""/>
			-->

	<!-- </node> -->


  <!-- Velodyne -->
  <!-- Initializes and starts the VLP16 -->
  <!-- Uncomment the line below for use with live data -->
  <include file="$(find velodyne_pointcloud)/launch/VLP16_points.launch" />


	<!-- Octomap -->
  <!-- Listens to incoming PointCloud2 data and incrementally builds an octomap.
       The data is sent out in different representations.
       See www.ros.org/wiki/octomap_server for details -->
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.2" />

		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->

    <!-- Required tf Transforms
sensor data frame â†’ /map (static world frame, changeable with parameter frame_id)
    Required transform of sensor data into the global map frame if you do scan integration.
    This information needs to be available from an external SLAM or localization node.-->

    <!-- Possible options: odom, odom_ned, odom_combined, map, map_ned, velodyne,
    world, base_link, base_link_frd, nav, fcu, local_origin, fcu_utm, -->
		<param name="frame_id" type="string" value="map" />

    <!--param name="base_frame_id" type="string" value="" /-->

		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="75.0" />

		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/velodyne_points" />

	</node>

	<!-- Starts node to publish map->velodyne transforms -->
	<node pkg="mapping_and_path_planning" name="tf2_velodyne_map_broadcaster"  type="tf2_map_velodyne.py" output="screen">
	</node>

	<!-- Rviz -->
  <!-- Starts Rviz for visualizin the data from the lidar, the 2D Hector map, and the 3D octomap -->
	<node name="rviz" pkg="rviz" type="rviz" args="-d $(find mapping_and_path_planning)/rviz/octomap_velodyne.rviz"
		required="true" output="screen"/>

  <!-- Sample LiDAR Data Playback-->
  <!--  Comment out the line below for use with live data-->

  <!-- <node pkg="rosbag" type="play" name="play" output="screen" args="clock $(find mapping_and_path_planning)/bagfiles/2021-09-10-14-12-22.bag">
</node> -->



</launch>
